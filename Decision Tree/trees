from math import log

"""
函数说明：
    创建数据集函数
Parameters:
    None
Returns:
    dataSet - 数据集
    laels - 分类标签
Author:
    Erik
Log:
    2020-10-25
"""


def createDataSet():
    dataSet = [[1, 1, 'yes'],
               [1, 1, 'yes'],
               [1, 0, 'no'],
               [0, 1, 'no'],
               [0, 1, 'no']]
    labels = ['no surfacing', 'flippers']
    return dataSet, labels


"""
函数说明：
    计算香农熵函数
函数思路：
    遍历数据集，统计数据集中标签出现的次数 -> 计算统计完的标签各自的概率，再用公式计算香农熵
Parameters:
    dataSet - 数据集  
Returns:
    dataSet - 数据集
    shannonEnt - 香农熵
Author:
    Erik
Log:
    2020-10-25
"""


def calcShannonEnt(dataSet):
    numEntires = len(dataSet)
    labelCntS = {}  # 保存每个标签出现的次数
    for featVec in dataSet:
        # 遍历数据集，统计标签出现的次数，做成字典
        currentLabel = featVec[-1]  # 保存数据集中出现的标签类别
        if currentLabel not in labelCntS.keys():  # 如果标签没有出现在字典中，则添加，出现过了则计数
            labelCntS[currentLabel] = 0
        labelCntS[currentLabel] += 1
    shannonEnt = 0.0  # 经验熵，或称香农熵
    for key in labelCntS:
        prob = float(labelCntS[key]) / numEntires  # 计算概率p(xi)
        shannonEnt -= prob * log(prob, 2)  # 计算H(D) = -∑p(xi)log2p(xi), i=1,2,3,...n
    return shannonEnt
