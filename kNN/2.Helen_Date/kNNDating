import numpy as np
import matplotlib.lines as pltlines
import matplotlib.pyplot as plt
import operator
import kNN
import sklearn

"""
函数说明：
    kNN(Nearest Neighbor) algorithm classify
Parameters:
    inX - 输入测试样本
    dataSet - 数据集
    labels - 分类标签
    k - 设定取前k个值(通常k<=20)
Returns:
    sortedClassCount[0][0] - 返回分类分类标签
Author:
    Erik
Log:
    2020-10-14
"""


def classify0(inX, dataSet, labels, k):
    dataSetSize = dataSet.shape[0]  # 获取数据集大小，即有几个样本点(几部电影) shape0表示行，1表示列
    # 以下4行计算欧式距离
    diffMat = np.tile(inX, (dataSetSize, 1)) - dataSet  # 测试点inX 与 已有点的差值
    sqDiffMat = diffMat**2  # (x1-x2),(y1-y2)差值的平方
    sqDistances = sqDiffMat.sum(axis=1)  # 平方和 sum(0)表示列相加，sum(1)表示行相加
    distances = sqDistances ** 0.5  # 开方
    sortedDistIndicies = distances.argsort()  # 返回distances中从小到大排序的索引值
    classCount = {}
    # 统计前k个样本中，属于A的和属于B的各为多少
    for i in range(k):
        voteIlabel = labels[sortedDistIndicies[i]]
        classCount[voteIlabel] = classCount.get(voteIlabel, 0) + 1  # 赋予键值对,并对其计数
    #  针对值，从大到小排序
    sortedClassCount = sorted(classCount.items(), key=operator.itemgetter(1), reverse=True)
    #  返回值最大的键(分类标签 - 字符串)
    return sortedClassCount[0][0]


"""
函数说明：
    文本转换函数 - 将文本转换为kNN分类器可接收的形式
Parameters:
    filename - 输入的文件名,即数据
Returns:
    returnMat - 返回的向量矩阵
    classLabelVector - 返回的分类标签向量
Author:
    Erik
Log:
    2020-10-17
"""


def file2matrix(filename):
    fr = open(filename)  # 打开文件
    arrayOfLines = fr.readlines()  # 按行读取文件内容
    numberOfLines = len(arrayOfLines)  # 获取文件总行数
    returnMat = np.zeros((numberOfLines, 3))  # 根据总行数构建numpy矩阵,numberOfLines=1000行，3列
    classLabelVector = []  # 分类标签
    index = 0  # 索引值
    for line in arrayOfLines:
        lineTemp = line.strip()
        listFromLine = lineTemp.split("\t")
        returnMat[index, :] = listFromLine[0:3]
        if listFromLine[-1] == 'didntLike':
            classLabelVector.append(1)
        elif listFromLine[-1] == 'smallDoses':
            classLabelVector.append(2)
        elif listFromLine[-1] == 'largeDoses':
            classLabelVector.append(3)
        index += 1
    return returnMat, classLabelVector


"""
函数说明：
    绘制散点图函数
Parameters:
    datingMat - 特征向量矩阵
    datingLabels - 分类标签向量
Returns:
    None
Author:
    Erik
Log:
    2020-10-21
"""


def DrawingScatter(datingMat, datingLabels):

    fig, axes = plt.subplots(nrows=2, ncols=2, sharex=False, sharey=False, figsize=(13, 8))

    numberOfLabels = len(datingLabels)
    LabelsColors = []
    for i in datingLabels:
        if 1 == i:
            LabelsColors.append('black')
        elif 2 == i:
            LabelsColors.append('red')
        elif 3 == i:
            LabelsColors.append('blue')
    # 画出以第1列每年飞行公里数，第2列玩视频游戏时间所占百分比的散点图，散点大小为15，透明度0.5
    axes[0][0].scatter(x=datingMat[:, 0], y=datingMat[:, 1], c=LabelsColors, s=15, alpha=0.5)  # s标记大小 alpha透明度
    axes0_title_text = axes[0][0].set_title('Scatter Plot1')
    axes0_xLabel_text = axes[0][0].set_xlabel('Air Miles per year')
    axes0_yLabel_text = axes[0][0].set_ylabel('Time of Playing Video Game in Percent')
    plt.setp(axes0_title_text, size=9, weight='bold', c='red')
    plt.setp(axes0_xLabel_text, size=7, weight='bold', c='black')
    plt.setp(axes0_yLabel_text, size=7, weight='bold', c='black')

    # 画出以第1列每年飞行公里数，第3列每周消费的冰淇淋公升数的散点图，散点大小为15，透明度0.5
    axes[0][1].scatter(x=datingMat[:, 0], y=datingMat[:, 2], c=LabelsColors, s=15, alpha=0.5)
    axes1_title_text = axes[0][1].set_title('Scatter Plot2')
    axes1_xLabel_text = axes[0][1].set_xlabel('Air Miles per year')
    axes1_yLabel_text = axes[0][1].set_ylabel('consume Ice-cream L/week')
    plt.setp(axes1_title_text, size=9, weight='bold', c='red')
    plt.setp(axes1_xLabel_text, size=7, weight='bold', c='black')
    plt.setp(axes1_yLabel_text, size=7, weight='bold', c='black')

    # 画出以第2列玩视频游戏时间所占百分比，第3列每周消费的冰淇淋公升数的散点图，散点大小为15，透明度0.5
    axes[1][0].scatter(x=datingMat[:, 1], y=datingMat[:, 2], c=LabelsColors, s=15, alpha=0.5)
    axes2_title_text = axes[1][0].set_title('Scatter Plot3')
    axes2_xLabel_text = axes[1][0].set_xlabel('Time of Playing Video Game in Percent')
    axes2_yLabel_text = axes[1][0].set_ylabel('consume Ice-cream L/week')
    plt.setp(axes2_title_text, size=9, weight='bold', c='red')
    plt.setp(axes2_xLabel_text, size=7, weight='bold', c='black')
    plt.setp(axes2_yLabel_text, size=7, weight='bold', c='black')
    dislike = pltlines.Line2D([], [], color='black', marker='.', markersize=7, label='disLike')
    smallDoses = pltlines.Line2D([], [], color='black', marker='.', markersize=7, label='smallDoses')
    largeDoses = pltlines.Line2D([], [], color='black', marker='.', markersize=7, label='largeDoses')

    axes[0][0].legend(handles=[dislike, smallDoses, largeDoses])
    axes[0][1].legend(handles=[dislike, smallDoses, largeDoses])
    axes[1][0].legend(handles=[dislike, smallDoses, largeDoses])

    plt.show()


"""
函数说明：
    归一化数值函数
Parameters:
    dataSet - 数据集(特征向量)
Returns:
    normDataSet - 归一化特征值
    ranges - 数据集中最大值(矩阵)与最小值的差值
    minVals - 数据集最小数值
Author:
    Erik
Log:
    2020-10-21
"""


def autoNorm(dataSet):
    # 获取数据集中的最小特征值和最大特征值
    minVals = dataSet.min(0)
    maxVals = dataSet.max(0)
    ranges = maxVals - minVals
    normDataSet = np.zeros(np.shape(dataSet))
    m = dataSet.shape[0]  # 数据集的行数
    normDataSet = dataSet - np.tile(minVals, (m, 1))  # OldValue - min，tile：minVals重复m次，每行重复1次
    normDataSet = normDataSet/np.tile(ranges, (m, 1))
    return normDataSet, ranges, minVals


"""
函数说明：
    约会分类器测试函数
Parameters:
    None
Returns:
    None
Author:
    Erik
Log:
    2020-10-21
"""


def datingClassTest():
    hoRatio = 0.1  # 取所有数据的百分之十
    datingMat, datingLabels = file2matrix("datingTestSet.txt")  # get特征向量和分类标签
    normDataset, ranges, minVals = autoNorm(datingMat)  # 数据归一化，get归一化的矩阵，数据范围，数据最小值
    row = normDataset.shape[0]  # 取得normMat的行数
    numOfTestVecs = int(row*hoRatio)  # 所有数据取百分之十的个数
    errorCnt = 0.0  # 分类错误计数
    for i in range(numOfTestVecs):
        classifierResult = classify0(normDataset[i, :], normDataset[numOfTestVecs:row, :], datingLabels[numOfTestVecs:row], 4)
        print("the classifier came back with:%d, the real answer is:%d" % (classifierResult, datingLabels[i]))
        if(classifierResult != datingLabels[i]):
            errorCnt += 1.0
    print("the total error rate is:%f" % (errorCnt/float(numOfTestVecs)))


if __name__ == '__main__':
    # for test
    
    # datingMat, datingLabels = file2matrix("datingTestSet.txt")
    # print(datingMat)
    # print(datingLabels)
    # # DrawingScatter(datingMat, datingLabels)
    # normDataset, ranges, minVals = autoNorm(datingMat)
    # print(normDataset)
    # print(ranges)
    # print(minVals)
    
    datingClassTest()
    exit()
