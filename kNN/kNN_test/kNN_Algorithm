import numpy as np
import operator
import kNN
import sklearn

"""
函数说明：
    创建数据集函数
Parameters:
    None
Returns:
    group - 样本点集合
    laels - 分类标签
Author:
    Erik
Log:
    2020-10-14
"""


def createDataSet():
    group = np.array([[1.0, 1.1], [1.0, 1.0], [0, 0], [0, 0.1]])
    labels = ['Action', 'Action', 'Love', 'Love']
    return group, labels


"""
函数说明：
    kNN(Nearest Neighbor) algorithm classify
Parameters:
    inX - 输入测试样本
    dataSet - 数据集
    labels - 分类标签
    k - 设定取前k个值(通常k<=20)
Returns:
    sortedClassCount[0][0] - 返回分类分类标签
Author:
    Erik
Log:
    2020-10-14
"""


def classify0(inX, dataSet, labels, k):
    dataSetSize = dataSet.shape[0]  # 获取数据集大小，即有几个样本点(几部电影) shape0表示行，1表示列
    # 以下4行计算欧式距离
    diffMat = np.tile(inX, (dataSetSize, 1)) - dataSet  # 测试点inX 与 已有点的差值
    sqDiffMat = diffMat**2  # (x1-x2),(y1-y2)差值的平方
    sqDistances = sqDiffMat.sum(axis=1)  # 平方和 sum(0)表示列相加，sum(1)表示行相加
    distances = sqDistances ** 0.5  # 开方
    sortedDistIndicies = distances.argsort()  # 返回distances中从小到大排序的索引值
    classCount = {}
    # 统计前k个样本中，属于A的和属于B的各为多少
    for i in range(k):
        voteIlabel = labels[sortedDistIndicies[i]]
        classCount[voteIlabel] = classCount.get(voteIlabel, 0) + 1  # 赋予键值对,并对其计数
    #  针对值，从大到小排序
    sortedClassCount = sorted(classCount.items(), key=operator.itemgetter(1), reverse=True)
    #  返回值最大的键(分类标签 - 字符串)
    return sortedClassCount[0][0]


if __name__ == '__main__':
    # 创建数据集
    group, labels = createDataSet()
    print(group)  # test
    print(labels)  # test
    # 测试集
    test = [0.8, 1]  # class A
    test_class = classify0(test, group, labels, 3)
    print(test_class)
