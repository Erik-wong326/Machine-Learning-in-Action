# -*- coding: UTF-8 -*-
import numpy as np

# 将文本转换为数字向量

""""
函数说明:
    创建实验样本(训练集) 1-1
Parameters:
    无
Return:
    postingList: 实验样本切分后的词条
    classVec: 类别标签向量，为词条分类
Author:
    Erik
Modify:
    2020-9-12
"""


def loadDataSet():
    postingList = [['my', 'dog', 'has', 'flea', 'problems', 'help', 'please'],  # 切分的词条
                   ['maybe', 'not', 'take', 'him', 'to', 'dog', 'park', 'stupid'],
                   ['my', 'dalmation', 'is', 'so', 'cute', 'I', 'love', 'him'],
                   ['stop', 'posting', 'stupid', 'worthless', 'garbage'],
                   ['mr', 'licks', 'ate', 'my', 'steak', 'how', 'to', 'stop', 'him'],
                   ['quit', 'buying', 'worthless', 'dog', 'food', 'stupid']]
    classVec = [0, 1, 0, 1, 0, 1]  # 类别标签向量，1代表侮辱性词汇，0代表不是
    return postingList, classVec


"""
函数说明：
    将切分的实验样本中的词条，整理成一个不含重复词条的词汇表 1-2
Parameters:
    dataSet:数据集
Return:
    list(vocabSet):词条不重复的词汇表
Author:
    Erik
Modify:
    2020/9/12
"""


# 创建词汇表-文本向量化 step1
def createVocabList(dataSet):
    vocabSet = set([])  # 创建一个空的列表用于装词条
    for document in dataSet:
        vocabSet = vocabSet | set(document)  # 为了词条不重复 - 取并集
    return list(vocabSet)


"""
函数说明：
    创建一个词条到向量的集合  1-3
Parameters:
    vocabList - 词汇表 
    inputSet - 实验样本
Return:
    returnVec - 分类后的向量列表
Author:
    Erik
Modify:
    2020/9/12
    2020/9/14 词袋模型bagOfWord2Vec
"""


# 将输入的词条，分类为向量-文档向量化step2
def setOfWords2Vec(vocabList, inputSet):
    returnVec = [0] * len(vocabList)   # 创建一个其中所含元素都为0的词汇表(向量)
    for word in inputSet:
        if word in vocabList:
            # returnVec[vocabList.index(word)] = 1
            returnVec[vocabList.index(word)] += 1  # modify 词袋模型
        else:
            print("the word %s is not in my vocabList" % word)
    return returnVec


"""
函数说明:
    朴素贝叶斯分类器训练函数 2-1 核心函数
Parameters:
    trainMatrix - 已向量化的文档(训练集文档矩阵),即setOfWords2Vec返回的矩阵
    tranCategory - 类别标签,即loadDataSet 返回的classVec
Return:
    p0Vect - 任意文档属于非侮辱类文档的条件概率
    p1Vect - 任意文档属于侮辱类文档的条件概率
    pAbusive - 文档属于侮辱类的概率
Author:
    Erik
Modify:
    2020-9-13
    2020-9-14
"""


def trainNBO(trainMatrix, trainCategory):
    numTrainDocs = len(trainMatrix)  # 计算训练的文档数目
    numWords = len(trainMatrix[0])  # 计算每篇文档的词条数
    pAbusive = sum(trainCategory)/float(numTrainDocs)  # 文档属于侮辱类的概率
    p0Num = np.ones(numWords)  # change to np.ones
    p1Num = np.ones(numWords)  # 创建numpy.zeros数组
    p0Denom = 2.0  # change to 2
    p1Denom = 2.0
    for i in range(numTrainDocs):
        if 1 == trainCategory[i]:  # 统计属于侮辱类的条件概率,p(w0|1),p(w1|1),...
            p1Num += trainMatrix[i]
            p1Denom += sum(trainMatrix[i])
        else:  # 统计属于非侮辱类的条件概率,p(w0|0),p(w1|0),...
            p0Num += trainMatrix[i]
            p0Denom += sum(trainMatrix[i])
    p1Vect = np.log(p1Num/p1Denom)  # change to log
    p0Vect = np.log(p0Num/p0Denom)  # change to log
    # 分类错误bug - modify 2020-9-14
    return p0Vect, p1Vect, pAbusive  # 返回属于侮辱类的条件概率数组，非侮辱类的条件概率数组,侮辱类的概率


"""
函数说明：
    朴素贝叶斯分类函数
Parameters:
    vec2Classify - 待分类的词条向量d
    p0Vect - 非侮辱类文档的条件概率数组
    p1Vect - 侮辱类文档的条件概率数组
    pClass1 - 文档属于侮辱类的概率
Return:
    1 - 文档属于侮辱类
    0 - 文档属于非侮辱类
Author:
    Erik
Modify:
    2020-9-13
"""


def classifyNB(vec2Classify, p0Vect, p1Vect, pClass1):
    p1 = sum(vec2Classify * p1Vect) + np.log(pClass1)
    p0 = sum(vec2Classify * p0Vect) + np.log(1 - pClass1)
    if p1 > p0:
        return 1
    else:
        return 0



"""
函数说明：
    测试朴素贝叶斯分类器 - 封装测试朴素贝叶斯分类器的操作
Parameters:
    None
Return:
    None
Author:
    Erik
Modify:
    2020-9-13
    2020-9-14 debug - trainNBO 添加参数InputWord
"""


def testingNB(InputWord):
    listPosts, listClasses = loadDataSet()  # 初始化词条和分类标签表
    # print("listPosts:\n", listPosts)  # 原始的词条列表
    Vocablist = createVocabList(listPosts)  # 词汇表(单词不重复出现的集合),在setOfWords2Vec中用于将词条向量化
    Vocablist.sort()  # 排序后的文档向量化固定
    # print("Vocablist:\n", Vocablist)
    trainMat = []  # trainMat - 向量化后的词条
    for postinDoc in listPosts:
        trainMat.append(setOfWords2Vec(Vocablist, postinDoc))
    # print("trainMat:\n", trainMat)
    # p0V, p1V, pAb = trainNBO(np.array(trainMat), np.arrar(listClasses))
    p0V, p1V, pAb = trainNBO(trainMat, listClasses)
    # print("p0V:\n", p0V)
    # print("p1V:\n", p1V)
    # print("ClassVec:\n", listClasses)
    # print("pAb:\n", pAb)
    # 测试
    thisDoc = np.array(setOfWords2Vec(Vocablist, InputWord))
    ret = classifyNB(thisDoc, p0V, p1V, pAb)
    if 0 == ret:
        print("%s is not abusive" % InputWord)
    else:
        print("%s is abusive" % InputWord)


if __name__ == '__main__':
    testWord1 = ['love', 'my', 'dalmation']
    # testWord2 = ['stupid', 'garbage']
    testWord3 = ['stupid', 'love', 'my', 'garbage']
    testingNB(testWord1)
    # testingNB(testWord3)
    print("this is end")
