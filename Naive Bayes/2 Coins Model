# -*- coding: UTF-8 -*-
import numpy as np
import scipy.stats as stats

# "二硬币模型"-EM算法
"""
函数说明：
    EM算法单次迭代：假设观测值服从二项分布
Parameters:
    priors: 初始参数[thetaA, thetaB]
    observations:观测序列集[n*m],n个观测序列，每个观测序列有m个元素
Returns:
    [new_theta_A, new_theta_B]: 更新后的theta列表
Author:
    Erik
Log:
    2020-9-23
"""


def em_single(priors, observations):
    update = {'A': {'up': 0, 'down': 0},
              'B': {'up': 0, 'down': 0}}
    # E step
    theta_A = priors[0]  # 初始化参数theta_A
    theta_B = priors[1]  # 初始化参数theta_B
    for observation in observations:
        len_ob = len(observation)  # 第i组观测序列的长度, i=1,2,3,...
        num_heads = observation.sum()  # 硬币出现正面的次数
        num_tails = len_ob - num_heads  # 硬币出现反面的次数
        # 观测i指第i个序列,而非观测值
        P_i_A = stats.binom.pmf(num_heads, len_ob, theta_A)  # 第i次试验由硬币A所抛，则出现第i次观测的概率：P(i|A)
        P_i_B = stats.binom.pmf(num_heads, len_ob, theta_B)  # 第i次试验由硬币B所抛，则出现第i次观测的概率：P(i|B)
        P_A_i = P_i_A / (P_i_A + P_i_B)  # 第i次观测，由掷硬币A产生的概率 P(A|i)
        P_B_i = P_i_B / (P_i_A + P_i_B)  # 第i次观测，是掷硬币B产生的概率 P(B|i)
        update['A']['up'] += P_A_i * num_heads
        update['A']['down'] += len_ob * P_A_i
        update['B']['up'] += P_B_i * num_heads
        update['B']['down'] += len_ob * P_B_i
    # M step
    new_theta_A = update['A']['up'] / update['A']['down']
    new_theta_B = update['B']['up'] / update['B']['down']
    return [new_theta_A, new_theta_B]


"""
函数说明：
    EM算法
Parameters:
    obs:观测序列
    prior:参数theta初值(自定义)
    tol:函数结束阈值
    ites:最大迭代次数(上限)
Returns:
    [new_prior, ite]: 新的参数
Author:
    Erik
Log:
    2020-9-23
"""


def em_al(obs, prior, tol=1e-6, ites=10000):
    ite = 0  # 初始化迭代次数
    while ite < ites:
        new_prior = em_single(prior, obs)
        delta_change = np.abs(prior[0] - new_prior[0])
        print('%d:' % ite, end='')
        print(new_prior)
        if delta_change < tol:
            break
        else:
            prior = new_prior
            ite += 1
    return [new_prior, ite]


if __name__ == "__main__":
    # 二硬币模型测试
    observations = np.array([[1, 0, 0, 0, 1, 1, 0, 1, 0, 1],
                            [1, 1, 1, 1, 0, 1, 1, 1, 1, 1],
                            [1, 0, 1, 1, 1, 1, 1, 0, 1, 1],
                            [1, 0, 1, 0, 0, 0, 1, 1, 0, 0],
                            [0, 1, 1, 1, 0, 1, 1, 1, 0, 1]])
    ret = em_al(observations, [0.6, 0.5])  # 手动调整参数输入
    exit()
