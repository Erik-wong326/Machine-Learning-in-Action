# -*- coding: UTF-8 -*-
import numpy as np
import re

# 文本解析及垃圾邮件测试
"""
函数说明:
    文档词袋模型 - 切分文本，基础筛选
Parameters:
    bigStr - 字符串句子
Return:
    ret或者[token.lower() for token in listOfTokens if len(token) > 2]
    将文档小写化，筛选>2的字符串，返回一个词汇表
Author:
    Erik
Modify Log:
    2020-9-15
"""


def textParse(bigStr):
    listOfTokens = re.split('\\W', bigStr)  # 将特殊符号(非字母，非数字)作为标志,进行字符串切分
    ret = []  # 用于装词条
    for token in listOfTokens:
        if len(token) > 2:  # 基本筛选
            ret.append(token.lower())
    return ret
    # return [token.lower() for token in listOfTokens if len(token) > 2]  # 方法2 返回一个列表


"""
函数说明：
    创建词汇表函数 - 文本向量化step1
Parameters:
    dataSet - 词条数据集
Return:
    list(vocabSet) - 不含重复词条的列表
Author:
    Erik
Modify Log:
    2020-9-15
"""


# 创建词汇表
def createVocablist(dataSet):
    vocabSet = set([])  # 创建一个集合set
    for doc in dataSet:
        vocabSet = vocabSet | set(doc)  # 取并集
    return list(vocabSet)  # 返回一个列表


if __name__ == '__main__':
    docList = []
    classList = []
    # 遍历文件
    for i in range(1,25):
        wordList = textParse(open('./email/spam/%d.txt' %i, 'r').read())
        docList.append(wordList)  # 读取垃圾邮件转换为字符列表,并标记垃圾邮件(1)
        classList.append(1)
        wordList = textParse(open('./email/ham/%d.txt' %i, 'r').read())
        docList.append(wordList)  # 读取非垃圾文件，转换为字符列表，并标记为非垃圾文件(0)
        classList.append(0)
        # wordList = textParse(open('./email/ham/%d.txt' %i, 'r').read())
    myVocabList = createVocablist(docList)  # 去重
    print(docList)  # 还未去重的训练集
    print("-" * 100)
    print(myVocabList)  # 去重后的训练集
    print(classList)
    exit()
