# -*- coding: UTF-8 -*-
import numpy as np
import re

# 文本解析及垃圾邮件测试
"""
函数说明:
    文档词袋模型 - 切分文本，基础筛选
Parameters:
    bigStr - 字符串句子
Return:
    ret或者[token.lower() for token in listOfTokens if len(token) > 2]
    将文档小写化，筛选>2的字符串，返回一个词汇表
Author:
    Erik
Modify Log:
    2020-9-15
"""


def textParse(bigStr):
    listOfTokens = re.split('\\W', bigStr)  # 将特殊符号(非字母，非数字)作为标志,进行字符串切分
    ret = []  # 用于装词条
    for token in listOfTokens:
        if len(token) > 2:  # 基本筛选
            ret.append(token.lower())
    return ret
    # return [token.lower() for token in listOfTokens if len(token) > 2]  # 方法2 返回一个列表


"""
函数说明：
    创建词汇表函数 - 文本向量化step1
Parameters:
    dataSet - 词条数据集
Return:
    list(vocabSet) - 不含重复词条的列表
Author:
    Erik
Modify Log:
    2020-9-15
"""


# 创建词汇表
def createVocablist(dataSet):
    vocabSet = set([])  # 创建一个集合set
    for doc in dataSet:
        vocabSet = vocabSet | set(doc)  # 取并集
    return list(vocabSet)  # 返回一个列表


"""
函数说明：
    文本向量化 step2
    根据去重的词汇表vocablist,将训练集inputset向量化，
    将出现的单词标记为1
Parameters:
    vocablist - 去重后的词汇表(creatVocablist返回的词汇表)
    inputset - 需要切分的词条列表
Return:
    returnVec - 向量化后的文档(词集模型)
Author:
    Erik
Log:
    2020-9-16
"""


def setOfWord2Vec(vocablist, inputset):
    returnVec = [0] * len(vocablist)  # 初始化传出向量列表为0
    for word in inputset:  # 遍历训练集
        if word in vocablist:
            returnVec[vocablist.index(word)] = 1  # 训练集出现的单词置1
        else:
            print("this word %s is not in my vocablist" % word)
    return returnVec


"""
函数说明：
    朴素贝叶斯分类器 - 核心函数
Parameters:
    trainMatrix - 训练矩阵(词集模型或者词袋模型)，即setOfWord2Vec
    trainCategory - 分类标签 listClass
Return:
    p0V - 非侮辱类文档条件概率
    p1V - 侮辱类文档条件概率
    pAbusive - 侮辱类文档概率
Author:
    Erik
Log:
    2020-9-16
"""


def trainNBO(trainMatrix, trainCategory):  # 传入训练矩阵,分类标签
    numOfDocs = len(trainMatrix)  # 计算训练的文档数目
    numWords = len(trainMatrix[0])  # 计算每篇文档的词条书
    pAbusive = sum(trainCategory) / float(numOfDocs)  # 文档属于侮辱类的概率
    p0num = np.ones(numWords)  # 创建Numpy.one 数组，拉普拉斯平滑
    p1num = np.ones(numWords)
    p0Deno = 2.0  # 分母初始化为2， 拉普拉斯平滑
    p1Deno = 2.0
    for i in range(numOfDocs):
        if 1 == trainCategory[i]:  # 统计属于侮辱类的条件概率
            p1num += trainMatrix[i]
            p1Deno += sum(trainMatrix[i])
        else:  # 统计属于非侮辱类的条件概率
            p0num += trainMatrix[i]
            p0Deno += sum(trainMatrix[i])
    p1V = np.log(p1num/p1Deno)  # 防止下溢出，取log
    p0V = np.log(p0num/p0Deno)
    return p0V, p1V, pAbusive
    
    
"""
函数说明:
    朴素贝叶斯分类器分类函数
Parameters:
    vec2Classify - 待分类的文档向量
    p0Vec - 非侮辱类条件概率数组
    p1Vec - 侮辱类条件概率数组
    pClass1 - 文档属于侮辱类的概率
Return:
    1 - 文档属于侮辱类
    0 - 文档属于非侮辱类
Author:
    Erik
Log:
    2020-9-17
"""


def classifyNB(vec2Classify, p0Vec, p1Vec, pClass1):
    p1 = sum(vec2Classify * p1Vec) + np.log(pClass1)
    p0 = sum(vec2Classify * p0Vec) + np.log(1 - pClass1)
    if p1 > p0:
        return 1
    else:
        return 0


if __name__ == '__main__':
    docList = []
    classList = []
    # 遍历文件
    for i in range(1,25):
        wordList = textParse(open('./email/spam/%d.txt' %i, 'r').read())
        docList.append(wordList)  # 读取垃圾邮件转换为字符列表,并标记垃圾邮件(1)
        classList.append(1)
        wordList = textParse(open('./email/ham/%d.txt' %i, 'r').read())
        docList.append(wordList)  # 读取非垃圾文件，转换为字符列表，并标记为非垃圾文件(0)
        classList.append(0)
        # wordList = textParse(open('./email/ham/%d.txt' %i, 'r').read())
    myVocabList = createVocablist(docList)  # 去重
    print(docList)  # 还未去重的训练集
    print("-" * 100)
    print(myVocabList)  # 去重后的训练集
    print(classList)
    exit()
