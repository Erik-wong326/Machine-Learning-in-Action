# -*- coding: UTF-8 -*-
import numpy as np
import os
import random
import jieba


"""
函数说明：
    文本预处理函数
Parameters:
    folder_path:文件夹(dir)路径
    test_size：测试集大小
Returns:
    cnt_words_list - 词频降序排序的词汇表
    train_data_list - 训练数据集
    test_data_list - 测试数据集
    train_class_list - 训练类别标签列表
    test_class_list - 测试类别标签列表
Author:
    Erik
Log:
    2020-9-26
"""


def TextProcessing(folder_path, test_size = 0.2):
    folder_list = os.listdir(folder_path)  # os.listdir()，列出某目录下所有目录和文件
    data_list = []
    class_list = []

    # 遍历每个子文件夹
    for folder in folder_list:
        # os.path.join(path, name),连接目录和文件名，可以不用自己添加分隔符，减少bug率
        new_folder_path = os.path.join(folder_path, folder)
        files = os.listdir(new_folder_path)
        j = 1
        # 遍历每个文档(txt)
        for file in files:
            if j > 100:
                break
            with open(os.path.join(new_folder_path, file), 'r', encoding='utf-8') as f:
                raw = f.read()

            word_cut = jieba.cut(raw)  # 精确模式，返回一个可迭代的数据类型
            word_list = list(word_cut)  # 将返回的单词，转换为单词列表

            data_list.append(word_list)  # 创建数据集
            class_list.append(folder)  # 文档类别标签(标号)列表
            j += 1
        # print(data_list)
        # print(class_list)
    data_class_list = list(zip(data_list, class_list))  # 将数据与对应的类别标签压缩合并
    print(data_class_list)
    random.shuffle(data_class_list)  # shuffle乱序data_class_list
    index = int (len(data_class_list) * test_size) + 1
    train_list = data_class_list[index:]  # 训练集 data_class_list后80%
    test_list = data_class_list[:index]  # 测试集 前20%
    train_data_list, train_class_list = zip(*train_list)  # 训练集解压缩
    test_data_list, test_class_list = zip(*test_list)  # 测试集解压缩

    cnt_words_dict = {}  # 统计训练集词汇词频
    for word_list in train_data_list:
        for word in word_list:
            if word in cnt_words_dict.keys():
                cnt_words_dict[word] += 1
            else:
                cnt_words_dict[word] = 1

    # 按照词频从高到低进行排序
    cnt_words_tuple_list = sorted(cnt_words_dict.items(), key = lambda f:f[1], reverse = True)
    cnt_words_list, cnt_words_num = zip(*cnt_words_tuple_list)  # 解压缩
    cnt_words_list = list(cnt_words_list)  # 转换为
    return cnt_words_list, train_data_list, test_data_list, train_class_list, test_class_list


"""
函数说明:
    创造特殊词汇集
Parameters:
    word_file - 传入文件路径参数
Return:
    wordsSet - 特定词汇的词汇集
    特定词汇 - 如 '一','其次','至于',这些对新闻分类无影响的介词、代词、连接词
Author:
    Erik
Log:
    2020-9-27
"""


def wordSet(word_file):
    wordsSet = set()
    with open(word_file, 'r', encoding='utf-8') as f:  # 打开文件
        for line in f.readlines():
            word = line.strip()  # strip将'\n'替换为'' 即去除换行符
            if len(word)>0:
                wordsSet.add(word)
    return wordsSet


"""
函数说明:
    特征词汇分类函数
Parameters:
    cnt_words_list - 词汇表(包含所有的词汇)
    deleteN - 代表删除了词频最高的前N个单词(即循环初始值)
    stopWordsSet - 特殊词汇集,分类筛选的标志
Returns:
    featureWords - 特征词列表(可用于新闻分类的词)
Author:
    Erik
Log:
    2020-9-27
"""


def wordsDict(cnt_words_list, deleteN, stopWordsSet = set()):
    featureWords = []
    n = 1
    for t in range(deleteN, len(cnt_words_list)):
        if n > 1000:  # featureWords的维度为1000
            break
        # 这个词不是数字，不是指定的结束语，1<单词长度<5，这个词即为特征词
        len_word = len(cnt_words_list[t])
        if not cnt_words_list[t].isdigit() and cnt_words_list[t] \
                not in stopWordsSet and 1 < len(cnt_words_list[t]) < 5:
            featureWords.append(cnt_words_list[t])
        n += 1
    return featureWords


"""
函数说明:
    文本向量化函数,根据featureWords进行向量化
Parameters:
    train_data_list - 训练集列表
    test_data_list - 测试集列表
    featureWords - 特征词汇表(目标)
    text - 训练集(或测试集)中的文档0,1,2,...
Returns:
    features - 训练集里每个索引(0,1,2,...)的特征向量
    train_feature_list - 训练集特征向量列表
    test_feature_list - 测试集特征向量列表
Author:
    Erik
Log:
    2020-9-27
"""


def Feature2Vec(train_data_list, test_data_list, featureWords):
    def feature_in_text(text, featureWords):
        textWords = set(text)  # 创建一个文本词汇集合
        features = [1 if word in textWords else 0 for word in featureWords]  # 遍历传入的单词，属于特征词汇的置1否则置0
        return features
    train_feature_list = [feature_in_text(text, featureWords) for text in train_data_list]  # 遍历训练集,调用函数进行向量化
    test_feature_list = [feature_in_text(text, featureWords) for text in test_data_list]
    return train_feature_list, test_feature_list
    

"""
函数说明:
    新闻文本分类器
Parameters:
    train_feature_list - 训练集特征向量列表
    test_feature_list - 测试集特征向量列表
    train_class_list - 训练集类别标签列表
    test_class_list - 测试集类别标签列表
Return:
    test_accuracy - 测试准确度
Author:
    Erik
Log:
    2020-9-27
"""


def TextClassifer(train_feature_list, test_feature_list, train_class_list, test_class_list):
    classifier = MultinomialNB().fit(train_feature_list, train_class_list)  # 调用多项式分布的朴素贝叶斯分类器进行分类
    test_accuracy = classifier.score(test_feature_list, test_class_list)
    return test_accuracy

        
if __name__ == '__main__':
    # 文本预处理
    folder_path = './SogouC/Sample'
    cnt_words_list, train_data_list, test_data_list, train_class_list,\
    test_class_list = TextProcessing(folder_path, test_size=0.2)

    # 创捷特殊词汇集
    stopWordsFile = './stopwords_cn.txt'
    stopWordsSet = wordSet(stopWordsFile)
    # feature_words = wordsDict(cnt_words_list, 100, stopWordsSet)
    # print(feature_words)

    test_accuracy_list = []
    deleteNs = range(0, 1000, 20)  # 删除高频词
    for deleteN in deleteNs:
        feature_words = wordsDict(cnt_words_list, deleteN, stopWordsSet)
        train_feature_list, test_feature_list = Feature2Vec(train_data_list, test_data_list, feature_words)
        test_accuracy = TextClassifer(train_feature_list, test_feature_list, train_class_list, test_class_list)
        test_accuracy_list.append(test_accuracy)

    plt.figure()
    plt.plot(deleteNs, test_accuracy_list)
    plt.title('Relations between deleteNs and test_accuracy')
    plt.xlabel('deleteNs')
    plt.ylabel('test_accuracy')
    plt.show()

    exit()

