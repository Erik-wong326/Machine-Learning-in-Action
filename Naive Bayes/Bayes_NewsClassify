# -*- coding: UTF-8 -*-
import numpy as np
import os
import random
import re
import jieba


"""
函数说明：
    文本预处理函数
Parameters:
    folder_path:文件夹(dir)路径
    test_size：测试集大小
Returns:
    cnt_words_list - 词频降序排序的词汇表
    train_data_list - 训练数据集
    test_data_list - 测试数据集
    train_class_list - 训练类别标签列表
    test_class_list - 测试类别标签列表
Author:
    Erik
Log:
    2020-9-26
"""


def TextProcessing(folder_path, test_size = 0.2):
    folder_list = os.listdir(folder_path)  # os.listdir()，列出某目录下所有目录和文件
    data_list = []
    class_list = []

    # 遍历每个子文件夹
    for folder in folder_list:
        # os.path.join(path, name),连接目录和文件名，可以不用自己添加分隔符，减少bug率
        new_folder_path = os.path.join(folder_path, folder)
        files = os.listdir(new_folder_path)
        j = 1
        # 遍历每个文档(txt)
        for file in files:
            if j > 100:
                break
            with open(os.path.join(new_folder_path, file), 'r', encoding='utf-8') as f:
                raw = f.read()

            word_cut = jieba.cut(raw)  # 精确模式，返回一个可迭代的数据类型
            word_list = list(word_cut)  # 将返回的单词，转换为单词列表

            data_list.append(word_list)  # 创建数据集
            class_list.append(folder)  # 文档类别标签(标号)列表
            j += 1
        # print(data_list)
        # print(class_list)
    data_class_list = list(zip(data_list, class_list))  # 将数据与对应的类别标签压缩合并
    print(data_class_list)
    random.shuffle(data_class_list)  # shuffle乱序data_class_list
    index = int (len(data_class_list) * test_size) + 1
    train_list = data_class_list[index:]  # 训练集 data_class_list后80%
    test_list = data_class_list[:index]  # 测试集 前20%
    train_data_list, train_class_list = zip(*train_list)  # 训练集解压缩
    test_data_list, test_class_list = zip(*test_list)  # 测试集解压缩

    cnt_words_dict = {}  # 统计训练集词汇词频
    for word_list in train_data_list:
        for word in word_list:
            if word in cnt_words_dict.keys():
                cnt_words_dict[word] += 1
            else:
                cnt_words_dict[word] = 1

    # 按照词频从高到低进行排序
    cnt_words_tuple_list = sorted(cnt_words_dict.items(), key = lambda f:f[1], reverse = True)
    cnt_words_list, cnt_words_num = zip(*cnt_words_tuple_list)  # 解压缩
    cnt_words_list = list(cnt_words_list)  # 转换为
    return cnt_words_list, train_data_list, test_data_list, train_class_list, test_class_list


if __name__ == '__main__':
    # 文本预处理
    folder_path = './SogouC/Sample'
    TextProcessing(folder_path)
    exit()
